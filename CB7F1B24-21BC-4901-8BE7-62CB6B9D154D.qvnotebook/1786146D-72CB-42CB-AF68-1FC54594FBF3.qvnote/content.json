{
  "title": "Docker & AWS",
  "cells": [
    {
      "type": "code",
      "language": "markdown",
      "data": "Amazon Web Services\nEstimated reading time: 7 minutes\nCreate machines on Amazon Web Services.\n\nTo create machines on Amazon Web Services, you must supply two parameters: the AWS Access Key ID and the AWS Secret Access Key.\n\nConfiguring credentials\nBefore using the amazonec2 driver, ensure that you’ve configured credentials.\n\nAWS credential file\nOne way to configure credentials is to use the standard credential file for Amazon AWS `~/.aws/credentials` file, which might look like:\n```bash\n[default]\naws_access_key_id = AKID1234567890\naws_secret_access_key = MY-SECRET-KEY\n```\nOn Mac OS or various flavors of Linux you can install the AWS Command Line Interface (aws cli) in the terminal and use the aws configure command which guides you through the creation of the credentials file.\n\nThis is the simplest method, you can then create a new machine with:\n\n$ docker-machine create --driver amazonec2 aws01\nCommand line flags\nAlternatively, you can use the flags --amazonec2-access-key and --amazonec2-secret-key on the command line:\n\n$ docker-machine create --driver amazonec2 --amazonec2-access-key AKI******* --amazonec2-secret-key 8T93C*******  aws01\nEnvironment variables\nYou can use environment variables:\n\n$ export AWS_ACCESS_KEY_ID=AKID1234567890\n$ export AWS_SECRET_ACCESS_KEY=MY-SECRET-KEY\n$ docker-machine create --driver amazonec2 aws01\nOptions\n--amazonec2-access-key: Your access key ID for the Amazon Web Services API.\n--amazonec2-ami: The AMI ID of the instance to use.\n--amazonec2-block-duration-minutes: AWS spot instance duration in minutes (60, 120, 180, 240, 300, or 360).\n--amazonec2-device-name: The root device name of the instance.\n--amazonec2-endpoint: Optional endpoint URL (hostname only or fully qualified URI)\n--amazonec2-iam-instance-profile: The AWS IAM role name to be used as the instance profile.\n--amazonec2-insecure-transport: Disable SSL when sending requests\n--amazonec2-instance-type: The instance type to run.\n--amazonec2-keypair-name: AWS keypair to use; requires –amazonec2-ssh-keypath\n--amazonec2-monitoring: Enable CloudWatch Monitoring.\n--amazonec2-open-port: Make the specified port number accessible from the Internet.\n--amazonec2-private-address-only: Use the private IP address only.\n--amazonec2-region: The region to use when launching the instance.\n--amazonec2-request-spot-instance: Use spot instances.\n--amazonec2-retries: Set retry count for recoverable failures (use -1 to disable)\n--amazonec2-root-size: The root disk size of the instance (in GB).\n--amazonec2-secret-key: Your secret access key for the Amazon Web Services API.\n--amazonec2-security-group: AWS VPC security group name.\n--amazonec2-session-token: Your session token for the Amazon Web Services API.\n--amazonec2-spot-price: Spot instance bid price (in dollars). Require the --amazonec2-request-spot-instance flag.\n--amazonec2-ssh-keypath: Path to Private Key file to use for instance. Matching public key with .pub extension should exist\n--amazonec2-ssh-user: The SSH Login username, which must match the default SSH user set in the ami used.\n--amazonec2-subnet-id: AWS VPC subnet ID.\n--amazonec2-tags: AWS extra tag key-value pairs (comma-separated, e.g. key1,value1,key2,value2).\n--amazonec2-use-ebs-optimized-instance: Create an EBS Optimized Instance, instance type must support it.\n--amazonec2-use-private-address: Use the private IP address for docker-machine, but still create a public IP address.\n--amazonec2-userdata: Path to file with cloud-init user data.\n--amazonec2-volume-type: The Amazon EBS volume type to be attached to the instance.\n--amazonec2-vpc-id: Your VPC ID to launch the instance in.\n--amazonec2-zone: The AWS zone to launch the instance in (i.e. one of a,b,c,d,e).\nENVIRONMENT VARIABLES AND DEFAULT VALUES:\n\nCLI option\tEnvironment variable\tDefault\n--amazonec2-access-key\tAWS_ACCESS_KEY_ID\t-\n--amazonec2-secret-key\tAWS_SECRET_ACCESS_KEY\t-\n--amazonec2-session-token\tAWS_SESSION_TOKEN\t-\n--amazonec2-ami\tAWS_AMI\tami-5f709f34\n--amazonec2-region\tAWS_DEFAULT_REGION\tus-east-1\n--amazonec2-vpc-id\tAWS_VPC_ID\t-\n--amazonec2-zone\tAWS_ZONE\ta\n--amazonec2-subnet-id\tAWS_SUBNET_ID\t-\n--amazonec2-security-group\tAWS_SECURITY_GROUP\tdocker-machine\n--amazonec2-tags\tAWS_TAGS\t-\n--amazonec2-instance-type\tAWS_INSTANCE_TYPE\tt2.micro\n--amazonec2-device-name\tAWS_DEVICE_NAME\t/dev/sda1\n--amazonec2-root-size\tAWS_ROOT_SIZE\t16\n--amazonec2-volume-type\tAWS_VOLUME_TYPE\tgp2\n--amazonec2-iam-instance-profile\tAWS_INSTANCE_PROFILE\t-\n--amazonec2-ssh-user\tAWS_SSH_USER\tubuntu\n--amazonec2-request-spot-instance\t-\tfalse\n--amazonec2-spot-price\t-\t0.50\n--amazonec2-use-private-address\t-\tfalse\n--amazonec2-private-address-only\t-\tfalse\n--amazonec2-monitoring\t-\tfalse\n--amazonec2-use-ebs-optimized-instance\t-\tfalse\n--amazonec2-ssh-keypath\tAWS_SSH_KEYPATH\t-\n--amazonec2-retries\t-\t5\nDefault AMIs\nBy default, the Amazon EC2 driver will use a daily image of Ubuntu 16.04 LTS.\n\nRegion\tAMI ID\nap-northeast-1\tami-b36d4edd\nap-southeast-1\tami-1069af73\nap-southeast-2\tami-1d336a7e\nca-central-1\tami-ca6ddfae\ncn-north-1\tami-79eb2214\neu-west-1\tami-8aa67cf9\neu-central-1\tami-ab0210c7\nsa-east-1\tami-185de774\nus-east-1\tami-26d5af4c\nus-west-1\tami-9cbcd2fc\nus-west-2\tami-16b1a077\nus-gov-west-1\tami-b0bad893\nSecurity Group\nNote that a security group will be created and associated to the host. This security group will have the following ports opened inbound:\n\nssh (22/tcp)\ndocker (2376/tcp)\nswarm (3376/tcp), only if the node is a swarm master\nIf you specify a security group yourself using the --amazonec2-security-group flag, the above ports will be checked and opened and the security group modified. If you want more ports to be opened, like application specific ports, use the AWS console and modify the configuration manually.\n\nVPC ID\nWe determine your default VPC ID at the start of a command. In some cases, either because your account does not have a default vpc, or you don’t want to use the default one, you can specify a vpc with the --amazonec2-vpc-id flag.\n\nTo find the VPC ID:\n\nLogin to the AWS console\nGo to Services -> VPC -> Your VPCs.\nLocate the VPC ID you want from the VPC column.\nGo to Services -> VPC -> Subnets. Examine the Availability Zone column to verify that zone a exists and matches your VPC ID.\n\nFor example, us-east1-a is in the a availability zone. If the a zone is not present, you can create a new subnet in that zone or specify a different zone when you create the machine.\n\nTo create a machine with a non-default VPC-ID:\n\n$ docker-machine create --driver amazonec2 --amazonec2-access-key AKI******* --amazonec2-secret-key 8T93C********* --amazonec2-vpc-id vpc-****** aws02\nThis example assumes the VPC ID was found in the a availability zone. Use the--amazonec2-zone flag to specify a zone other than the a zone. For example, --amazonec2-zone c signifies us-east1-c.\n\nVPC Connectivity\nMachine uses SSH to complete the set up of instances in EC2 and requires the ability to access the instance directly.\n\nIf you use the flag --amazonec2-private-address-only, you will need to ensure that you have some method of accessing the new instance from within the internal network of the VPC (e.g. a corporate VPN to the VPC, a VPN instance inside the VPC or using Docker-machine from an instance within your VPC).\n\nConfiguration of VPCs is beyond the scope of this guide, however the first step in troubleshooting is ensuring if you are using private subnets that you follow the design guidance in the AWS VPC User Guide and have some form of NAT available so that the set up process can access the internet to complete set up.\n\nCustom AMI and SSH username\nThe default SSH username for the default AMIs is ubuntu.\n\nYou need to change the SSH username only if the custom AMI you use has a different SSH username.\n\nYou can change the SSH username with the --amazonec2-ssh-user according to the AMI you selected with the --amazonec2-ami."
    }
  ]
}