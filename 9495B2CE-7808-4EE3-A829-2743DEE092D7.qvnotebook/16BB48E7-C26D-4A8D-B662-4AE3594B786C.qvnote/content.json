{
  "title": "Custom Callback",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "//If the built-in options are not sufficient for handling an authentication request, a custom callback can be provided to allow the application to handle success or failure.\n\napp.get('/login', function(req, res, next) {\n  passport.authenticate('local', function(err, user, info) {\n    if (err) { return next(err); }\n    if (!user) { return res.redirect('/login'); }\n    req.logIn(user, function(err) {\n      if (err) { return next(err); }\n      return res.redirect('/users/' + user.username);\n    });\n  })(req, res, next);\n});\n\n//In this example, note that authenticate() is called from within the route handler, rather than being used as route middleware. This gives the callback access to the req and res objects through closure.\n\n//If authentication failed, user will be set to false. If an exception occurred, err will be set. An optional info argument will be passed, containing additional details provided by the strategy's verify callback.\n\n//The callback can use the arguments supplied to handle the authentication result as desired. Note that when using a custom callback, it becomes the application's responsibility to establish a session (by calling req.login()) and send a response.\n\n"
    }
  ]
}