{
  "title": "OpenID",
  "cells": [
    {
      "type": "markdown",
      "data": "OpenID is an open standard for federated authentication. When visiting a website, users present their OpenID to sign in. The user then authenticates with their chosen OpenID provider, which issues an assertion to confirm the user's identity. The website verifies this assertion in order to sign the user in.\n\nSupport for OpenID is provided by the passport-openid module.\n\n# Install\n\n`$ npm i passport-openid`\n\n# Configuration\n\nWhen using OpenID, a return URL and realm must be specified. The returnURL is the URL to which the user will be redirected after authenticating with their OpenID provider. realm indicates the part of URL-space for which authentication is valid. Typically this will be the root URL of the website."
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "var passport = require('passport')\n  , OpenIDStrategy = require('passport-openid').Strategy;\n\npassport.use(new OpenIDStrategy({\n    returnURL: 'http://www.example.com/auth/openid/return',\n    realm: 'http://www.example.com/'\n  },\n  function(identifier, done) {\n    User.findOrCreate({ openId: identifier }, function(err, user) {\n      done(err, user);\n    });\n  }\n));\n\n//The verify callback for OpenID authentication accepts an identifier argument containing the user's claimed identifier."
    },
    {
      "type": "code",
      "language": "html",
      "data": "<!-- Form\n\nA form is placed on a web page, allowing the user to enter their OpenID and sign in. -->\n\n<form action=\"/auth/openid\" method=\"post\">\n    <div>\n        <label>OpenID:</label>\n        <input type=\"text\" name=\"openid_identifier\"/><br/>\n    </div>\n    <div>\n        <input type=\"submit\" value=\"Sign In\"/>\n    </div>\n</form>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "//Routes\n\n//Two routes are required for OpenID authentication. The first route accepts the form submission containing an OpenID identifier. During authentication, the user will be redirected to their OpenID provider. The second route is the URL to which the user will be returned after authenticating with their OpenID provider.\n\n// Accept the OpenID identifier and redirect the user to their OpenID\n// provider for authentication.  When complete, the provider will redirect\n// the user back to the application at:\n//     /auth/openid/return\napp.post('/auth/openid', passport.authenticate('openid'));\n\n// The OpenID provider has redirected the user back to the application.\n// Finish the authentication process by verifying the assertion.  If valid,\n// the user will be logged in.  Otherwise, authentication has failed.\napp.get('/auth/openid/return',\n  passport.authenticate('openid', { successRedirect: '/',\n                                    failureRedirect: '/login' }));"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "//Profile Exchange\n\n//OpenID can optionally be configured to retrieve profile information about the user being authenticated. Profile exchange is enabled by setting the profile option to true.\n\npassport.use(new OpenIDStrategy({\n    returnURL: 'http://www.example.com/auth/openid/return',\n    realm: 'http://www.example.com/',\n    profile: true\n  },\n  function(identifier, profile, done) {\n    // ...\n  }\n));\n//When profile exchange is enabled, the function signature of the verify callback accepts an additional profile argument containing user profile information provided by the OpenID provider; refer to User Profile for further information."
    }
  ]
}